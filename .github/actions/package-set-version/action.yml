name: Set Package Version
description: Write updated version code to package.json

inputs:
  mode:
    required: true
    type: string

outputs:
  version:
    value: ${{ steps.set.outputs.version }}
  mode:
    value: ${{ inputs.mode }}

runs:
  using: "composite"
  steps:

    - name: Configure Git
      run: |
        git config --local user.name "GitHub Action"
        git config --local user.email "action@github.com"
      shell: bash

    - name: Pull latest changes
      run: git pull origin main
      shell: bash

    - name: Fetch remote tags
      run: git fetch --tags --force
      shell: bash

    - name: Handle version bump
      run: |
        MODE="${{ inputs.mode }}"
        CURRENT_VERSION=$(jq -r .version package.json)

        echo "📦 Version actuelle : $CURRENT_VERSION"

        # Découpage de la version actuelle
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

        # Incrément selon le mode
        if [ "$MODE" == "major" ]; then
          MAJOR=$((MAJOR + 1))
          MINOR=0
          PATCH=0
        elif [ "$MODE" == "minor" ]; then
          MINOR=$((MINOR + 1))
          PATCH=0
        elif [ "$MODE" == "patch" ]; then
          PATCH=$((PATCH + 1))
        else
          echo "❌ Mode inconnu: $MODE"
          exit 1
        fi

        NEXT_VERSION="$MAJOR.$MINOR.$PATCH"
        TAG="v$NEXT_VERSION"

        echo "🎯 Prochaine version : $NEXT_VERSION"
        echo "🔖 Tag prévu : $TAG"

        # Si le tag existe localement
        if git rev-parse "$TAG" >/dev/null 2>&1; then
          echo "⚠️ Tag $TAG existe localement"
          if ! git ls-remote --tags origin | grep -q "refs/tags/$TAG"; then
            echo "🧹 Suppression du tag local $TAG (pas encore distant)"
            git tag -d "$TAG"
          else
            echo "❌ Tag $TAG existe déjà à distance → annulation"
            exit 1
          fi
        fi

        # Applique la version avec npm (création du tag)
        npm version "$MODE"

        echo "✅ Version mise à jour avec succès : $NEXT_VERSION"
      shell: bash

    - name: Push commit and tag
      run: git push origin main --follow-tags
      shell: bash

    - id: set
      run: |
        version=$(jq -r '.version' package.json)
        echo "version=${version}" >> "$GITHUB_OUTPUT"
      shell: bash
