name: Codesign Product
description: Submit product to notary

inputs:
  sign:
    required: true
    type: string
  keychain:
    required: true
    type: string
  apple_id:
    required: true
    type: string 
  team_id:
    required: true
    type: string 
  password:
    required: true
    type: string 
  product_path:
    required: true
    type: string
  dmg_path:
    required: true
    type: string

outputs:
  product_path: 
    value: ${{ inputs.product_path }}
  dmg_path: 
    value: ${{ inputs.dmg_path }}
  notarization_status:
    value: ${{ steps.notarytool.outputs.notarization_status }}

runs:
  using: "composite"
  steps:

    - name: setup
      id: setup
      run: |
        echo "dmg_path=${{ inputs.dmg_path }}" >> $GITHUB_OUTPUT
        curl "${entitlements_url}" -o entitlements.plist -sL
        echo "entitlements_path=${GITHUB_WORKSPACE}/entitlements.plist" >> $GITHUB_OUTPUT
      shell: bash
      env:
        path: ${{ inputs.product_path }}
        entitlements_url: 'https://raw.githubusercontent.com/miyako/4D/v1/entitlements.plist'

    - name: Normalize ALL WebViewerCEF bundles (helpers exec must not be symlinks)
      shell: bash
      run: |
        set -euo pipefail
        shopt -s nullglob

        echo "üîé Scan des r√©pertoires *WebViewerCEF.bundle/Contents/Frameworks* dans ${GITHUB_WORKSPACE}"

        py_resolve='import os,sys; base=sys.argv[1]; tgt=sys.argv[2]; print(os.path.abspath(os.path.join(base, tgt)))'

        FOUND=0
        while IFS= read -r -d '' BUNDLE_ROOT; do
          FOUND=1
          echo "üì¶ Bundle: $BUNDLE_ROOT"

          SRC_CEF="${BUNDLE_ROOT}/Chromium Embedded Framework.framework"
          if [ ! -d "$SRC_CEF" ]; then
            echo "‚ùå CEF introuvable dans $BUNDLE_ROOT"; exit 1
          fi

          while IFS= read -r -d '' APP; do
            NAME="$(basename "$APP" .app)"
            EXE="$APP/Contents/MacOS/$NAME"

            # 1) L'ex√©cutable principal ne doit pas √™tre un symlink
            if [ -L "$EXE" ]; then
              TGT="$(readlink "$EXE")"
              RESOLVED=$(python3 -c "$py_resolve" "$(dirname "$EXE")" "$TGT")
              if [ ! -f "$RESOLVED" ]; then
                echo "‚ùå Cible du symlink introuvable: $EXE -> $TGT"; exit 1
              fi
              echo "ü™Ñ Remplace symlink ex√©cutable: $EXE  (-> $TGT)"
              rm -f "$EXE"
              /usr/bin/ditto "$RESOLVED" "$EXE"
              chmod 755 "$EXE"
            fi

            # 2) Chaque helper doit avoir sa copie locale du framework CEF
            DEST_CEF="$APP/Contents/Frameworks/Chromium Embedded Framework.framework"
            if [ -L "$DEST_CEF" ]; then
              echo "ü™Ñ Supprime symlink CEF dans $APP"
              rm -f "$DEST_CEF"
            fi
            if [ ! -d "$DEST_CEF" ]; then
              echo "üìö Copie CEF local dans: $DEST_CEF"
              /usr/bin/ditto "$SRC_CEF" "$DEST_CEF"
            fi

          done < <(find "$BUNDLE_ROOT" -type d -name "4D Helper*.app" -print0)

        done < <(find "${GITHUB_WORKSPACE}" -type d -path "*/WebViewerCEF.bundle/Contents/Frameworks" -print0)

        if [ $FOUND -eq 0 ]; then
          echo "‚ÑπÔ∏è Aucun WebViewerCEF.bundle trouv√© (ce n‚Äôest pas bloquant)"
        fi

    - name: Preflight ‚Äî aucun ex√©cutable de helper ne doit √™tre un symlink
      shell: bash
      run: |
        set -euo pipefail
        SYMLINKS_FOUND=0

        while IFS= read -r -d '' SYM; do
          if [ $SYMLINKS_FOUND -eq 0 ]; then
            echo "‚ùå Symlinks d'ex√©cutables trouv√©s :"
          fi
          echo " - $SYM"
          SYMLINKS_FOUND=1
        done < <(find "${GITHUB_WORKSPACE}" -type l -path "*/4D Helper*.app/Contents/MacOS/*" -print0)

        if [ $SYMLINKS_FOUND -eq 1 ]; then
          exit 1
        fi

        echo "‚úÖ OK ‚Äî aucun symlink executable dans les helpers"

    - name: Codesign (robuste, ordre correct, timestamp)
      shell: bash
      run: |
        set -euo pipefail
        echo "=== Codesign start ==="
        echo "product_path=${product_path}"
        echo "sign identity='${sign}'"
        echo "entitlements='${entitlements_path}'"

        # 0) nettoyage d'attributs (quarantine/xattr)
        echo "üßπ Nettoyage xattr (quarantine) sur le produit..."
        xattr -cr "${product_path}" || true

        # 1) r√©solution du keychain (si c'est un chemin ou un nom)
        KC="${keychain}"
        if [[ ! "${KC}" = /* && "${KC}" != *.keychain* ]]; then
          if [ -f "${HOME}/Library/Keychains/${KC}.keychain-db" ]; then
            KC="${HOME}/Library/Keychains/${KC}.keychain-db"
          elif [ -f "${HOME}/Library/Keychains/${KC}" ]; then
            KC="${HOME}/Library/Keychains/${KC}"
          fi
        fi
        if [ -f "${KC}" ]; then
          echo "üîê Keychain resolved: ${KC}"
          # attempt unlock / set partition list if KEYCHAIN_PWD exists in environment (optional)
          if [ -n "${KEYCHAIN_PWD:-}" ]; then
            echo "üîë Unlocking keychain with provided KEYCHAIN_PWD"
            security unlock-keychain -p "${KEYCHAIN_PWD}" "${KC}"
            echo "üîß Setting key partition list (allow codesign to use private key)"
            security set-key-partition-list -S apple-tool:,apple: -s -k "${KEYCHAIN_PWD}" "${KC}" || true
          else
            echo "‚ö†Ô∏è No KEYCHAIN_PWD provided ‚Äî trying to unlock keychain without password (best-effort)"
            security unlock-keychain "${KC}" || true
            # best-effort set-key-partition-list (may fail without password)
            security set-key-partition-list -S apple-tool:,apple: -s "${KC}" >/dev/null 2>&1 || true
          fi
          KC_ARG=(--keychain "${KC}")
        else
          echo "‚ö†Ô∏è Keychain file not found; codesign will use default keychains"
          KC_ARG=()
        fi

        # 2) base options for codesign (no --deep here: sign components explicitly)
        codesign_base=(codesign --force --options runtime --strict --timestamp --entitlements "${entitlements_path}" --sign "${sign}")
        # if we resolved a keychain, add it to options
        if [ "${#KC_ARG[@]}" -gt 0 ]; then
          codesign_base+=("${KC_ARG[@]}")
        fi

        # retry helper
        retry_codesign() {
          local target="$1"
          local attempt=1
          local max_attempts=4
          local delay=3
          until [ $attempt -gt $max_attempts ]; do
            echo "[attempt $attempt/$max_attempts] codesign -> $target"
            if "${codesign_base[@]}" "$target" 2>&1; then
              echo "‚úÖ signed: $target"
              return 0
            fi
            echo "‚ö†Ô∏è codesign failed for $target ‚Äî retry in ${delay}s..."
            sleep $delay
            attempt=$((attempt+1))
            delay=$((delay*2))
          done
          echo "‚ùå codesign permanently failed for $target"
          return 1
        }

        # 3) Sign executables & libs outside .4dbase/.4darchive
        echo "‚û°Ô∏è Signing executables & libs (hors .4dbase/.4darchive)..."
        while IFS= read -r -d '' f; do
          retry_codesign "$f" || exit 1
        done < <(find "${product_path}" \( -type f -perm -111 -o -name '*.dylib' -o -name '*.so' \) ! -path '*/.4dbase/*' ! -path '*/.4darchive/*' -print0)

        # 4) Sign frameworks (binary inside first) outside .4dbase/.4darchive
        echo "‚û°Ô∏è Signing frameworks (binary inside -> framework)..."
        while IFS= read -r -d '' fw; do
          echo " - framework: $fw"
          fwname="$(basename "$fw" .framework)"
          candidates=( "$fw/Versions/A/$fwname" "$fw/Versions/Current/$fwname" "$fw/$fwname" )
          found=""
          for c in "${candidates[@]}"; do
            [ -f "$c" ] && { found="$c"; break; }
          done
          if [ -z "$found" ]; then
            found=$(find "$fw" -type f -perm -111 -maxdepth 3 -print -quit || true)
          fi
          if [ -n "$found" ]; then
            retry_codesign "$found" || exit 1
          fi
          retry_codesign "$fw" || exit 1
        done < <(find "${product_path}" -type d -name '*.framework' ! -path '*/.4dbase/*' ! -path '*/.4darchive/*' -print0)

        # 5) Sign bundles/plugins/kexts outside .4dbase/.4darchive
        echo "‚û°Ô∏è Signing bundles/plugins/kexts..."
        while IFS= read -r -d '' bp; do
          echo " - bundle: $bp"
          exe=$(find "$bp" -type f -perm -111 -maxdepth 6 -print -quit || true)
          [ -n "$exe" ] && retry_codesign "$exe" || true
          retry_codesign "$bp" || exit 1
        done < <(find "${product_path}" -type d \( -name '*.bundle' -o -name '*.plugin' -o -name '*.kext' \) ! -path '*/.4dbase/*' ! -path '*/.4darchive/*' -print0)

        # 6) Sign nested .app helpers (outside .4dbase/.4darchive)
        echo "‚û°Ô∏è Signing nested .app helpers..."
        while IFS= read -r -d '' app; do
          echo " - helper app: $app"
          mainexe="$app/Contents/MacOS/$(basename "$app" .app)"
          if [ -f "$mainexe" ]; then
            retry_codesign "$mainexe" || exit 1
          else
            exe=$(find "$app" -type f -perm -111 -maxdepth 6 -print -quit || true)
            [ -n "$exe" ] && retry_codesign "$exe" || true
          fi
          # sign dylibs inside app
          while IFS= read -r -d '' dylib; do
            retry_codesign "$dylib" || exit 1
          done < <(find "$app" -type f -name '*.dylib' -print0)
          retry_codesign "$app" || exit 1
        done < <(find "${product_path}" -type d -name '*.app' ! -path '*/.4dbase/*' ! -path '*/.4darchive/*' -print0)

        # 7) Special: sign internals of .4dbase and .4darchive (but DO NOT sign the container)
        echo "‚û°Ô∏è Signing internals of .4dbase and .4darchive (container SKIPPED)..."
        while IFS= read -r -d '' bundle; do
          echo " - container: $bundle"
          # executables/libs in container
          while IFS= read -r -d '' f; do
            retry_codesign "$f" || exit 1
          done < <(find "$bundle" -type f \( -perm -111 -o -name '*.dylib' -o -name '*.so' \) -print0)

          # frameworks inside
          while IFS= read -r -d '' fw; do
            echo "   - internal framework: $fw"
            fwname="$(basename "$fw" .framework)"
            candidates=( "$fw/Versions/A/$fwname" "$fw/Versions/Current/$fwname" "$fw/$fwname" )
            found=""
            for c in "${candidates[@]}"; do [ -f "$c" ] && { found="$c"; break; } done
            if [ -z "$found" ]; then
              found=$(find "$fw" -type f -perm -111 -maxdepth 3 -print -quit || true)
            fi
            [ -n "$found" ] && retry_codesign "$found" || true
            retry_codesign "$fw" || exit 1
          done < <(find "$bundle" -type d -name '*.framework' -print0)

          # internal apps
          while IFS= read -r -d '' app; do
            echo "   - internal app: $app"
            mainexe="$app/Contents/MacOS/$(basename "$app" .app)"
            [ -f "$mainexe" ] && retry_codesign "$mainexe" || true
            retry_codesign "$app" || exit 1
          done < <(find "$bundle" -type d -name '*.app' -print0)

          # plugins/bundles/kexts inside
          while IFS= read -r -d '' bp; do
            exe=$(find "$bp" -type f -perm -111 -maxdepth 6 -print -quit || true)
            [ -n "$exe" ] && retry_codesign "$exe" || true
            retry_codesign "$bp" || exit 1
          done < <(find "$bundle" -type d \( -name '*.bundle' -o -name '*.plugin' -o -name '*.kext' \) -print0)

          echo "   -> done container: $bundle"
        done < <(find "${product_path}" -type d \( -name '*.4dbase' -o -name '*.4darchive' \) -print0 | sort -z)

        # 8) Final sign of top-level .app (if product_path is .app)
        if [[ "${product_path}" == *.app ]]; then
          echo "‚û°Ô∏è Final top-level app signature: ${product_path}"
          retry_codesign "${product_path}" || { echo "‚ùå Final signature failed"; exit 1; }
        else
          echo "‚ÑπÔ∏è product_path is not a .app ‚Äî skipping final container sign"
        fi

        # 9) Verification
        echo "üîé Post-sign verification (codesign --verify)"
        if ! codesign --verify --deep --strict --verbose=4 "${product_path}"; then
          echo "‚ùå codesign verification FAILED for ${product_path}"
          echo "‚Üí run 'codesign -dvvv <path>' locally to inspect"
          exit 1
        fi

        echo "üìÑ Signature details:"
        codesign -dvvv "${product_path}" || true

        # spctl check (warn only; useful for Gatekeeper validation)
        if command -v spctl >/dev/null 2>&1; then
          echo "üîê spctl assessment (warning if it fails)"
          spctl -a -t exec -vv "${product_path}" || echo "‚ö†Ô∏è spctl check failed (non-fatal here)"
        fi

        echo "‚úÖ Codesign finished successfully for ${product_path}"
      env:
        sign: ${{ inputs.sign }}
        keychain: ${{ inputs.keychain }}
        product_path: ${{ inputs.product_path }}
        entitlements_path: ${{ steps.setup.outputs.entitlements_path }}

    - name: hdiutil (sparse -> convert)
      id: hdiutil
      if: ${{ !contains(inputs.product_path, 'update.mac.4darchive') }}
      shell: bash
      env:
        product_path: ${{ inputs.product_path }}
        dmg_path: ${{ steps.setup.outputs.dmg_path }}
        FS: HFS+                 # ou APFS si tu pr√©f√®res
        FORMAT: UDBZ             # UDBZ (bzip2) ou UDZO (zlib)
        MARGIN_PCT: "50"         # marge % au-dessus de la taille source
        EXTRA_MB: "500"          # marge fixe suppl√©mentaire en MB
        VERIFY: "1"              # 0 pour d√©sactiver verify
      run: |
        set -euo pipefail

        SRC="${product_path}"
        OUT="${dmg_path}"
        VOLNAME="$(basename "${OUT%.dmg}")"
        WORKDIR="$(mktemp -d /tmp/dmgbuild.XXXXXX)"
        MOUNT_DIR="${WORKDIR}/mnt"
        mkdir -p "$MOUNT_DIR"

        # Estimation taille
        SRC_KB=$(du -sk "$SRC" | awk '{print $1}')
        SRC_MB=$(( SRC_KB / 1024 ))
        if [[ $SRC_MB -lt 1 ]]; then SRC_MB=1; fi
        NEEDED_MB=$(( SRC_MB + (SRC_MB * ${MARGIN_PCT} / 100) + ${EXTRA_MB} ))
        if [[ $NEEDED_MB -lt 300 ]]; then NEEDED_MB=300; fi

        # Sparse + montage
        hdiutil create -type SPARSE -fs "${FS}" -volname "${VOLNAME}" -nospotlight \
          -size "${NEEDED_MB}m" -ov "${WORKDIR}/staging.sparseimage"

        hdiutil attach "${WORKDIR}/staging.sparseimage" -nobrowse -noverify -noautoopen -owners on \
          -mountpoint "${MOUNT_DIR}"

        # Copie
        rsync -a --delete "${SRC}" "${MOUNT_DIR}/"

        # D√©montage
        sync
        hdiutil detach "${MOUNT_DIR}" || hdiutil detach -force "${MOUNT_DIR}" || true

        # Compact + conversion
        hdiutil compact "${WORKDIR}/staging.sparseimage" || true
        hdiutil convert "${WORKDIR}/staging.sparseimage" -format "${FORMAT}" -o "${OUT}" -ov

        # Verify optionnel
        if [[ "${VERIFY}" == "1" ]]; then
          hdiutil verify "${OUT}"
        fi

        echo "[‚úì] DMG pr√™t: ${OUT}"

    - name: Debug notarization env vars
      id: debug-notarization
      if: ${{ !contains(inputs.product_path, 'update.mac.4darchive') }}
      run: |
        echo "Apple ID: ${apple_id}"
        echo "Team ID: ${team_id}"
        echo "Password is set: [${#password} characters]"
      shell: bash
      env:
        apple_id: ${{ inputs.apple_id }}
        team_id: ${{ inputs.team_id }}
        password: ${{ inputs.password }}

    - name: Notarize with Apple NotaryTool and check result (polling)
      id: notarytool
      if: ${{ !contains(inputs.product_path, 'update.mac.4darchive') }}
      shell: bash
      run: |
        set -euo pipefail

        echo "üì¶ Soumission √† Apple NotaryTool..."
        json_output_file="notarytool-submit.json"
        status_file="${GITHUB_WORKSPACE}/notarization_status.txt"

        # soumission (sans --wait)
        xcrun notarytool submit "${dmg_path}" \
          --apple-id "${apple_id}" \
          --team-id "${team_id}" \
          --password "${password}" \
          --output-format json >"$json_output_file"

        echo "üìÑ JSON submit:"
        cat "$json_output_file" || true

        submission_id=$(jq -r '.id // empty' "$json_output_file")
        if [[ -z "$submission_id" ]]; then
          echo "‚ùå Impossible de r√©cup√©rer l‚ÄôID de soumission"
          exit 1
        fi
        echo "üÜî Soumission envoy√©e, ID=$submission_id"

        # Polling (10s) jusqu'√† 1h (360 tentatives)
        attempt=0
        max_attempts=360
        status="In Progress"
        while [[ "$status" == "In Progress" && $attempt -lt $max_attempts ]]; do
          sleep 10
          attempt=$((attempt+1))
          echo "‚è≥ V√©rification notarisation (tentative $attempt)..."
          out=$(xcrun notarytool info "$submission_id" \
            --apple-id "${apple_id}" \
            --team-id "${team_id}" \
            --password "${password}" \
            --output-format json 2>/dev/null || true)
          status=$(echo "$out" | jq -r '.status // empty')
          echo "Statut actuel: ${status:-unknown}"

          # Optionnel: √©crire l‚Äôinstantan√© JSON pour debug
          echo "$out" > "notarytool-info-$attempt.json" || true
        done

        echo "${status:-Unknown}" > "$status_file"
        echo "notarization_status=${status:-Unknown}" >> $GITHUB_OUTPUT

        if [[ "$status" == "Accepted" ]]; then
          echo "‚úÖ Notarisation r√©ussie"
          exit 0
        elif [[ "$status" == "Invalid" ]]; then
          echo "‚ùå Notarisation rejet√©e (Invalid)"
          xcrun notarytool log "$submission_id" \
            --apple-id "${apple_id}" \
            --team-id "${team_id}" \
            --password "${password}" \
            --output-format json || true
          exit 1
        else
          echo "‚ùå Notarisation non termin√©e ou statut inattendu: '${status:-Unknown}'"
          exit 1
        fi
      env:
        apple_id: ${{ inputs.apple_id }}
        team_id: ${{ inputs.team_id }}
        password: ${{ inputs.password }}
        dmg_path: ${{ steps.setup.outputs.dmg_path }}
