name: Codesign & Notarize Product
description: Submit product to Apple Notary in a reliable and faster way

inputs:
  sign:
    required: true
    type: string
  keychain:
    required: true
    type: string
  apple_id:
    required: true
    type: string 
  team_id:
    required: true
    type: string 
  password:
    required: true
    type: string 
  product_path:
    required: true
    type: string
  dmg_path:
    required: true
    type: string

outputs:
  product_path: 
    value: ${{ inputs.product_path }}
  dmg_path: 
    value: ${{ inputs.dmg_path }}
  notarization_status:
    value: ${{ steps.notarytool.outputs.notarization_status }}

runs:
  using: "composite"
  steps:

    - name: Setup
      id: setup
      run: |
        echo "dmg_path=${{ inputs.dmg_path }}" >> $GITHUB_OUTPUT
        curl -sL 'https://raw.githubusercontent.com/miyako/4D/v1/entitlements.plist' -o entitlements.plist
        echo "entitlements_path=${GITHUB_WORKSPACE}/entitlements.plist" >> $GITHUB_OUTPUT
      shell: bash
      env:
        path: ${{ inputs.product_path }}

    - name: Cleanup symlinks & extended attributes
      shell: bash
      run: |
        set -euo pipefail
        echo "🔹 Cleanup symlinks and extended attributes in ${product_path}"
        find "${product_path}" -type l -exec rm -f {} +
        xattr -rc "${product_path}"
      env:
        product_path: ${{ inputs.product_path }}

    - name: Prepare list of items to codesign
      id: list_binaries
      shell: bash
      run: |
        set -euo pipefail
        ITEMS_FILE="${GITHUB_WORKSPACE}/codesign_items.txt"
        > "$ITEMS_FILE"
        
        echo "🔹 Collecting binaries, frameworks, bundles, plugins, kexts, apps, 4dbase/4darchive..."
        find "${product_path}" \
          -type f \( -perm -111 -o -name "*.dylib" -o -name "*.so" \) >> "$ITEMS_FILE"
        find "${product_path}" -type d \( -name "*.framework" -o -name "*.bundle" -o -name "*.plugin" -o -name "*.kext" -o -name "*.app" -o -name "*.4dbase" -o -name "*.4darchive" \) >> "$ITEMS_FILE"
        
        echo "🔹 Total items to sign: $(wc -l < "$ITEMS_FILE")"
        echo "items_file=$ITEMS_FILE" >> $GITHUB_OUTPUT
      env:
        product_path: ${{ inputs.product_path }}

    - name: Codesign all items (single pass)
      shell: bash
      run: |
        set -euo pipefail

        retry_codesign() {
          local target="$1"
          local timestamp_flag="$2"
          local attempt=1
          local max_attempts=5
          local delay=5

          while [ $attempt -le $max_attempts ]; do
            echo "[$attempt/$max_attempts] codesign: $target"
            output=$(codesign --verbose --strict --options=runtime $timestamp_flag --force --sign "${sign}" --keychain "${keychain}" --entitlements "${entitlements_path}" "$target" 2>&1)
            status=$?
            echo "$output"
            if [ $status -eq 0 ]; then
              return 0
            fi
            if echo "$output" | grep -qiE "no identity found|password|resource fork|invalid|not found in keychain|code object is not signed at all"; then
              echo "❌ Fatal error detected, aborting."
              return 1
            fi
            echo "⚠️ Retry $attempt failed, next attempt in ${delay}s..."
            attempt=$(( attempt + 1 ))
            sleep $delay
            delay=$(( delay * 2 ))
          done

          echo "❌ Failed to codesign after $max_attempts attempts: $target"
          return 1
        }

        while IFS= read -r ITEM; do
          # executables, dylib, so -> timestamp
          if [[ -f "$ITEM" ]] && ([[ -x "$ITEM" ]] || [[ "$ITEM" == *.dylib ]] || [[ "$ITEM" == *.so ]]); then
            retry_codesign "$ITEM" "--timestamp" || exit 1
          else
            # bundles, frameworks, apps, 4dbase, 4darchive -> timestamp
            retry_codesign "$ITEM" "--timestamp" || exit 1
          fi
        done < "${{ steps.list_binaries.outputs.items_file }}"

        echo "✅ All items signed"

    - name: Create DMG
      id: hdiutil
      shell: bash
      env:
        product_path: ${{ inputs.product_path }}
        dmg_path: ${{ steps.setup.outputs.dmg_path }}
      run: |
        set -euo pipefail
        SRC="${product_path}"
        OUT="${dmg_path}"
        VOLNAME="$(basename "${OUT%.dmg}")"
        WORKDIR="$(mktemp -d /tmp/dmgbuild.XXXXXX)"
        MOUNT_DIR="${WORKDIR}/mnt"
        mkdir -p "$MOUNT_DIR"

        echo "[i] Creating sparse image..."
        SRC_MB=$(( $(du -sm "$SRC" | cut -f1) ))
        NEEDED_MB=$(( SRC_MB * 2 ))
        hdiutil create -type SPARSE -fs HFS+ -volname "$VOLNAME" -size "${NEEDED_MB}m" -nospotlight -ov "${WORKDIR}/staging.sparseimage"
        hdiutil attach "${WORKDIR}/staging.sparseimage" -nobrowse -noverify -noautoopen -owners on -mountpoint "$MOUNT_DIR"
        rsync -a "$SRC/" "$MOUNT_DIR/"
        sync
        hdiutil detach "$MOUNT_DIR"
        hdiutil convert "${WORKDIR}/staging.sparseimage" -format UDBZ -o "$OUT" -ov
        echo "[✓] DMG ready: $OUT"

    - name: Notarize
      id: notarytool
      shell: bash
      run: |
        set -euo pipefail
        echo "📦 Submitting DMG to Apple NotaryTool..."
        JSON_OUT="notarytool-output.json"
        if ! xcrun notarytool submit "${dmg_path}" --apple-id "${apple_id}" --team-id "${team_id}" --password "${password}" --wait --output-format json 1>"$JSON_OUT"; then
          echo "❌ NotaryTool execution failed"
          exit 1
        fi
        cat "$JSON_OUT"
        STATUS=$(jq -r '.status // empty' "$JSON_OUT")
        SUB_ID=$(jq -r '.id // empty' "$JSON_OUT")
        echo "🛡️ Notarization status: $STATUS"
        echo "$STATUS" > "$GITHUB_WORKSPACE/notarization_status.txt"
        if [[ "$STATUS" != "Accepted" ]]; then
          if [[ -n "$SUB_ID" ]]; then
            xcrun notarytool log "$SUB_ID" --apple-id "${apple_id}" --team-id "${team_id}" --password "${password}" --output-format normal || true
          fi
          exit 1
        fi
        echo "✅ Notarization successful"
      env:
        apple_id: ${{ inputs.apple_id }}
        team_id: ${{ inputs.team_id }}
        password: ${{ inputs.password }}
        dmg_path: ${{ steps.setup.outputs.dmg_path }}