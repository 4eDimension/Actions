name: Codesign Product
description: Submit product to Apple Notary

inputs:
  sign:
    required: true
    type: string
  keychain:
    required: true
    type: string
  apple_id:
    required: true
    type: string 
  team_id:
    required: true
    type: string 
  password:
    required: true
    type: string 
  product_path:
    required: true
    type: string
  dmg_path:
    required: true
    type: string

outputs:
  product_path: 
    value: ${{ inputs.product_path }}
  dmg_path: 
    value: ${{ inputs.dmg_path }}
  notarization_status:
    value: ${{ steps.notarytool.outputs.notarization_status }}

runs:
  using: "composite"
  steps:

    - name: setup
      id: setup
      run: |
        echo "dmg_path=${{ inputs.dmg_path }}" >> $GITHUB_OUTPUT
        curl "${entitlements_url}" -o entitlements.plist -sL
        echo "entitlements_path=${GITHUB_WORKSPACE}/entitlements.plist" >> $GITHUB_OUTPUT
      shell: bash
      env:
        path: ${{ inputs.product_path }}
        entitlements_url: 'https://raw.githubusercontent.com/miyako/4D/v1/entitlements.plist'

    - name: Normalize ALL WebViewerCEF bundles (helpers exec must not be symlinks)
      shell: bash
      run: |
        set -euo pipefail
        shopt -s nullglob

        echo "üîé Scan des r√©pertoires *WebViewerCEF.bundle/Contents/Frameworks* dans ${GITHUB_WORKSPACE}"

        # helper Python pour r√©soudre la cible d'un symlink relatif
        py_resolve='import os,sys; base=sys.argv[1]; tgt=sys.argv[2]; print(os.path.abspath(os.path.join(base, tgt)))'

        FOUND=0
        while IFS= read -r -d '' BUNDLE_ROOT; do
          FOUND=1
          echo "üì¶ Bundle: $BUNDLE_ROOT"

          SRC_CEF="${BUNDLE_ROOT}/Chromium Embedded Framework.framework"
          if [ ! -d "$SRC_CEF" ]; then
            echo "‚ùå CEF introuvable dans $BUNDLE_ROOT"; exit 1
          fi

          # Traiter tous les helpers
          while IFS= read -r -d '' APP; do
            NAME="$(basename "$APP" .app)"
            EXE="$APP/Contents/MacOS/$NAME"

            # 1) L'ex√©cutable principal ne doit pas √™tre un symlink
            if [ -L "$EXE" ]; then
              TGT="$(readlink "$EXE")"
              RESOLVED=$(python3 -c "$py_resolve" "$(dirname "$EXE")" "$TGT")
              if [ ! -f "$RESOLVED" ]; then
                echo "‚ùå Cible du symlink introuvable: $EXE -> $TGT"; exit 1
              fi
              echo "ü™Ñ Remplace symlink ex√©cutable: $EXE  (-> $TGT)"
              rm -f "$EXE"
              /usr/bin/ditto "$RESOLVED" "$EXE"
              chmod 755 "$EXE"
            fi

            # 2) Tous les helpers doivent avoir une copie locale du framework CEF
            DEST_CEF="$APP/Contents/Frameworks/Chromium Embedded Framework.framework"
            if [ -L "$DEST_CEF" ]; then
              echo "ü™Ñ Supprime symlink CEF dans $APP"
              rm -f "$DEST_CEF"
            fi
            if [ ! -d "$DEST_CEF" ]; then
              echo "üìö Copie CEF local dans: $DEST_CEF"
              /usr/bin/ditto "$SRC_CEF" "$DEST_CEF"
            fi

          done < <(find "$BUNDLE_ROOT" -type d -name "4D Helper*.app" -print0)

          # Sanity check : executables des helpers
          echo "üîé Sanity check (ls des ex√©cutables des helpers)"
          while IFS= read -r -d '' APP; do
            N="$(basename "$APP" .app)"
            ls -l "$APP/Contents/MacOS/$N" || true
          done < <(find "$BUNDLE_ROOT" -type d -name "4D Helper*.app" -print0)

        done < <(find "${GITHUB_WORKSPACE}" -type d -path "*/WebViewerCEF.bundle/Contents/Frameworks" -print0)

        if [ $FOUND -eq 0 ]; then
          echo "‚ùå Aucun WebViewerCEF.bundle trouv√©"; exit 1
        fi

    - name: Preflight ‚Äî aucun ex√©cutable de helper ne doit √™tre un symlink
      shell: bash
      run: |
        set -euo pipefail
        SYMLINKS_FOUND=0

        find "${GITHUB_WORKSPACE}" -type l -path "*/4D Helper*.app/Contents/MacOS/*" -print0 | \
        while IFS= read -r -d '' SYM; do
          if [ $SYMLINKS_FOUND -eq 0 ]; then
            echo "‚ùå Symlinks d'ex√©cutables trouv√©s :"
          fi
          echo " - $SYM"
          SYMLINKS_FOUND=1
        done

        if [ $SYMLINKS_FOUND -eq 1 ]; then
          exit 1
        fi

        echo "‚úÖ OK ‚Äî aucun symlink executable dans les helpers"

    - name: Codesign
      shell: bash
      run: |
        set -e

        retry_codesign() {
          local target="$1"
          local timestamp_flag="$2"  # Ajouter un param√®tre pour le timestamp
          local attempt=1
          local max_attempts=5
          local delay=5

          while [ $attempt -le $max_attempts ]; do
            echo "[$attempt/$max_attempts] codesign de: $target"

            output=$(codesign --verbose --deep --strict --options=runtime $timestamp_flag \
              --force --sign "${sign}" --keychain "${keychain}" \
              --entitlements "${entitlements_path}" "$target" 2>&1)
            status=$?
            echo "$output"

            if [ $status -eq 0 ]; then
              echo "‚úÖ codesign r√©ussi pour $target"
              return 0
            fi

            if echo "$output" | grep -qiE "no identity found|password|resource fork|invalid|not found in keychain|code object is not signed at all"; then
              echo "‚ùå Erreur fatale d√©tect√©e, arr√™t imm√©diat."
              return 1
            fi

            echo "‚ö†Ô∏è Tentative $attempt √©chou√©e, nouvelle tentative dans ${delay}s..."
            attempt=$(( attempt + 1 ))
            sleep $delay
            delay=$(( delay * 2 ))
          done

          echo "‚ùå √âchec apr√®s $max_attempts tentatives pour $target"
          return 1
        }

        IFS=$'\n'; set -f

        echo "=== √âtape 1 : signer tous les binaires externes (avec timestamp) ==="
        find "${product_path}" -type f \( -perm -111 -o -name "*.dylib" -o -name "*.so" \) \
          ! -path "*.4dbase/*" ! -path "*.4darchive/*" \
          | while IFS= read -r f; do
              retry_codesign "$f" "--timestamp" || exit 1
            done

        echo "=== √âtape 2 : signer les frameworks (avec timestamp) ==="
        find "${product_path}" -type d -name "*.framework" \
          | while IFS= read -r f; do
              retry_codesign "$f" "--timestamp" || exit 1
            done

        echo "=== √âtape 3 : signer les bundles/plugins/kexts (avec timestamp) ==="
        find "${product_path}" -type d \( -name "*.bundle" -o -name "*.plugin" -o -name "*.kext" \) \
          | while IFS= read -r f; do
              retry_codesign "$f" "--timestamp" || exit 1
            done

        echo "=== √âtape 4 : signer les .4dbase et .4darchive (avec timestamp) ==="
        find "${product_path}" -type d \( -name "*.4dbase" -o -name "*.4darchive" \) \
          | while IFS= read -r bundle; do
              echo "üìÇ Signing binaries inside: $bundle"
              find "$bundle" -type f \( -perm -111 -o -name "*.dylib" -o -name "*.so" \) \
                | while IFS= read -r f; do
                    retry_codesign "$f" "--timestamp" || exit 1
                  done
            done

        echo "=== √âtape 5 : signer toutes les apps internes (SANS timestamp) ==="
        find "${product_path}" -type d -name "*.app" \
          | while IFS= read -r f; do
              retry_codesign "$f" "--timestamp" || exit 1
            done

        echo "=== √âtape 6 : signature finale du paquet racine (avec timestamp si c'est .app) ==="
        if [[ "${product_path}" == *.app ]]; then
          echo "üì¶ Signature finale de l‚Äôapp principale : ${product_path}"
          retry_codesign "${product_path}" "--timestamp" || exit 1
        else
          echo "‚ÑπÔ∏è ${product_path} n‚Äôest pas une .app/.4dbase/.4darchive, pas de signature racine."
        fi

        echo "=== √âtape 7 : v√©rification stricte sur tous les binaires sign√©s ==="
        find "${product_path}" -type f \( -perm -111 -o -name "*.dylib" -o -name "*.so" \) \
          | while IFS= read -r f; do
              codesign --verify --strict --verbose=2 "$f" || exit 1
            done

        echo "‚úÖ Tous les composants ont √©t√© sign√©s et v√©rifi√©s correctement."
      env:
        sign: ${{ inputs.sign }}
        keychain: ${{ inputs.keychain }}
        product_path: ${{ inputs.product_path }}
        entitlements_path: ${{ steps.setup.outputs.entitlements_path }}

    - name: Create DMG
      id: hdiutil
      shell: bash
      env:
        product_path: ${{ inputs.product_path }}
        dmg_path: ${{ steps.setup.outputs.dmg_path }}
      run: |
        set -euo pipefail
        SRC="${product_path}"
        OUT="${dmg_path}"
        VOLNAME="$(basename "${OUT%.dmg}")"
        WORKDIR="$(mktemp -d /tmp/dmgbuild.XXXXXX)"
        MOUNT_DIR="${WORKDIR}/mnt"
        mkdir -p "$MOUNT_DIR"

        echo "[i] Creating sparse image..."
        SRC_MB=$(( $(du -sm "$SRC" | cut -f1) ))
        NEEDED_MB=$(( SRC_MB * 2 ))
        hdiutil create -type SPARSE -fs HFS+ -volname "$VOLNAME" -size "${NEEDED_MB}m" -nospotlight -ov "${WORKDIR}/staging.sparseimage"
        hdiutil attach "${WORKDIR}/staging.sparseimage" -nobrowse -noverify -noautoopen -owners on -mountpoint "$MOUNT_DIR"
        rsync -a "$SRC/" "$MOUNT_DIR/"
        sync
        hdiutil detach "$MOUNT_DIR"
        hdiutil convert "${WORKDIR}/staging.sparseimage" -format UDBZ -o "$OUT" -ov
        echo "[‚úì] DMG ready: $OUT"

    - name: Notarize with Apple NotaryTool
      id: notarytool
      shell: bash
      env:
        apple_id: ${{ inputs.apple_id }}
        team_id: ${{ inputs.team_id }}
        password: ${{ inputs.password }}
        dmg_path: ${{ steps.setup.outputs.dmg_path }}
      run: |
        set -euo pipefail
        echo "üì¶ Soumission √† Apple NotaryTool..."
        xcrun notarytool submit "${dmg_path}" \
          --apple-id "${apple_id}" \
          --team-id "${team_id}" \
          --password "${password}" \
          --wait \
          --output-format json > notarytool-output.json

        status=$(jq -r '.status // empty' notarytool-output.json)
        submission_id=$(jq -r '.id // empty' notarytool-output.json)
        echo "üõ°Ô∏è Statut notarisation: $status"

        echo "$status" > notarization_status.txt

        if [[ "$status" == "Accepted" ]]; then
          echo "‚úÖ Notarisation r√©ussie"
          exit 0
        elif [[ "$status" == "Invalid" ]]; then
          echo "‚ùå Notarisation rejet√©e"
          xcrun notarytool log "$submission_id" \
            --apple-id "${apple_id}" \
            --team-id "${team_id}" \
            --password "${password}" \
            --output-format normal || true
          exit 1
        else
          echo "‚ùå Statut inattendu: $status"
          exit 1
        fi