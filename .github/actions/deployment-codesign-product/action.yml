name: Codesign Product
description: Submit product to notary

inputs:
  sign:
    required: true
    type: string
  keychain:
    required: true
    type: string
  apple_id:
    required: true
    type: string 
  team_id:
    required: true
    type: string 
  password:
    required: true
    type: string 
  product_path:
    required: true
    type: string
  dmg_path:
    required: true
    type: string

outputs:
  product_path: 
    value: ${{ inputs.product_path }}
  dmg_path: 
    value: ${{ inputs.dmg_path }}
  notarization_status:
    value: ${{ steps.notarytool.outputs.notarization_status }}

runs:
  using: "composite"
  steps:

    - name: Setup entitlements
      id: setup
      shell: bash
      run: |
        set -euo pipefail
        entitlements_file="${GITHUB_WORKSPACE}/entitlements.plist"
        curl -sL "${entitlements_url}" -o "$entitlements_file"
        if [[ ! -f "$entitlements_file" ]]; then
          echo "‚ùå Fichier d‚Äôentitlements manquant"
          exit 1
        fi
        echo "entitlements_path=$entitlements_file" >> $GITHUB_OUTPUT
      env:
        entitlements_url: 'https://raw.githubusercontent.com/miyako/4D/v1/entitlements.plist'

    - name: Export codesign variables
      shell: bash
      run: |
        set -euo pipefail
        export sign="${{ inputs.sign }}"
        export keychain="${{ inputs.keychain }}"
        export product_path="${{ inputs.product_path }}"
        export entitlements_path="${{ steps.setup.outputs.entitlements_path }}"
        echo "‚úÖ Variables codesign export√©es"

    - name: Codesign
      shell: bash
      run: |
        set -euo pipefail

        # V√©rifier que toutes les variables sont d√©finies
        for var in sign keychain product_path entitlements_path; do
          if [[ -z "${!var}" ]]; then
            echo "‚ùå Variable manquante: $var"
            exit 1
          fi
        done

        retry_codesign() {
          local target="$1"
          local attempt=1
          local max_attempts=2
          local delay=5
          while [ $attempt -le $max_attempts ]; do
            echo "[$attempt/$max_attempts] codesign de: $target"
            if codesign --verbose --deep --strict --options=runtime --timestamp \
              --force --sign "$sign" --keychain "$keychain" --entitlements "$entitlements_path" "$target"; then
              echo "‚úÖ codesign r√©ussi pour $target"
              return 0
            fi
            echo "‚ö†Ô∏è Tentative $attempt √©chou√©e, prochaine dans ${delay}s..."
            sleep $delay
            attempt=$(( attempt + 1 ))
            delay=$(( delay * 2 ))
          done
          echo "‚ùå √âchec apr√®s $max_attempts tentatives pour $target"
          return 1
        }

        # Signer tous les bundles / apps / 4dbase / 4darchive
        while IFS= read -r -d '' item; do
          retry_codesign "$item" || exit 1
        done < <(find "$product_path" -type d \( -name "*.app" -o -name "*.4dbase" -o -name "*.4darchive" \) -print0)

        # Signer frameworks / plugins / bundles / kext
        while IFS= read -r -d '' item; do
          retry_codesign "$item" || exit 1
        done < <(find "$product_path" -type d \( -name "*.framework" -o -name "*.bundle" -o -name "*.plugin" -o -name "*.kext" \) -print0)

        # Signature finale de la racine si .app
        if [[ "$product_path" == *.app ]]; then
          retry_codesign "$product_path" || exit 1
        fi

        echo "‚úÖ Tous les composants sign√©s (batch) et v√©rifi√©s."

    - name: Create DMG
      id: hdiutil
      shell: bash
      run: |
        set -euo pipefail
        SRC="${{ inputs.product_path }}"
        OUT="${{ inputs.dmg_path }}"
        VOLNAME="$(basename "${OUT%.dmg}")"
        WORKDIR="$(mktemp -d /tmp/dmgbuild.XXXXXX)"
        MOUNT_DIR="${WORKDIR}/mnt"
        mkdir -p "$MOUNT_DIR"

        echo "[i] Creating sparse image..."
        SRC_MB=$(( $(du -sm "$SRC" | cut -f1) ))
        NEEDED_MB=$(( SRC_MB * 2 ))
        hdiutil create -type SPARSE -fs HFS+ -volname "$VOLNAME" -size "${NEEDED_MB}m" -nospotlight -ov "${WORKDIR}/staging.sparseimage"
        hdiutil attach "${WORKDIR}/staging.sparseimage" -nobrowse -noverify -noautoopen -owners on -mountpoint "$MOUNT_DIR"
        rsync -a "$SRC/" "$MOUNT_DIR/"
        sync
        hdiutil detach "$MOUNT_DIR"
        hdiutil convert "${WORKDIR}/staging.sparseimage" -format UDBZ -o "$OUT" -ov
        echo "[‚úì] DMG ready: $OUT"

    - name: Notarize with Apple NotaryTool
      id: notarytool
      shell: bash
      run: |
        set -euo pipefail
        echo "üì¶ Soumission √† Apple NotaryTool..."
        xcrun notarytool submit "${{ inputs.dmg_path }}" \
          --apple-id "${{ inputs.apple_id }}" \
          --team-id "${{ inputs.team_id }}" \
          --password "${{ inputs.password }}" \
          --wait \
          --output-format json > notarytool-output.json

        status=$(jq -r '.status // empty' notarytool-output.json)
        submission_id=$(jq -r '.id // empty' notarytool-output.json)
        echo "üõ°Ô∏è Statut notarisation: $status"

        if [[ "$status" == "Accepted" ]]; then
          echo "‚úÖ Notarisation r√©ussie"
          echo "notarization_status=$status" >> $GITHUB_OUTPUT
          exit 0
        elif [[ "$status" == "Invalid" ]]; then
          echo "‚ùå Notarisation rejet√©e"
          xcrun notarytool log "$submission_id" \
            --apple-id "${{ inputs.apple_id }}" \
            --team-id "${{ inputs.team_id }}" \
            --password "${{ inputs.password }}" \
            --output-format normal || true
          exit 1
        else
          echo "‚ùå Statut inattendu: $status"
          exit 1
        fi