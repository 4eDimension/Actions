name: Codesign Product
description: Submit product to notary

inputs:
  sign:
    required: true
    type: string
  keychain:
    required: true
    type: string
  apple_id:
    required: true
    type: string 
  team_id:
    required: true
    type: string 
  password:
    required: true
    type: string 
  product_path:
    required: true
    type: string
  dmg_path:
    required: true
    type: string

outputs:
  product_path: 
    value: ${{ inputs.product_path }}
  dmg_path: 
    value: ${{ inputs.dmg_path }}
  notarization_status:
    value: ${{ steps.notarytool.outputs.notarization_status }}

runs:
  using: "composite"
  steps:

    - name: setup
      id: setup
      run: |
        echo "dmg_path=${{ inputs.dmg_path }}" >> $GITHUB_OUTPUT
        curl "${entitlements_url}" -o entitlements.plist -sL
        echo "entitlements_path=${GITHUB_WORKSPACE}/entitlements.plist" >> $GITHUB_OUTPUT
      shell: bash
      env:
        path: ${{ inputs.product_path }}
        entitlements_url: 'https://raw.githubusercontent.com/miyako/4D/v1/entitlements.plist'

    - name: Normalize ALL WebViewerCEF bundles (helpers exec must not be symlinks)
      shell: bash
      run: |
        set -euo pipefail
        shopt -s nullglob

        echo "🔎 Scan des répertoires *WebViewerCEF.bundle/Contents/Frameworks* dans ${GITHUB_WORKSPACE}"

        py_resolve='import os,sys; base=sys.argv[1]; tgt=sys.argv[2]; print(os.path.abspath(os.path.join(base, tgt)))'

        FOUND=0
        while IFS= read -r -d '' BUNDLE_ROOT; do
          FOUND=1
          echo "📦 Bundle: $BUNDLE_ROOT"

          SRC_CEF="${BUNDLE_ROOT}/Chromium Embedded Framework.framework"
          if [ ! -d "$SRC_CEF" ]; then
            echo "❌ CEF introuvable dans $BUNDLE_ROOT"; exit 1
          fi

          while IFS= read -r -d '' APP; do
            NAME="$(basename "$APP" .app)"
            EXE="$APP/Contents/MacOS/$NAME"

            # 1) L'exécutable principal ne doit pas être un symlink
            if [ -L "$EXE" ]; then
              TGT="$(readlink "$EXE")"
              RESOLVED=$(python3 -c "$py_resolve" "$(dirname "$EXE")" "$TGT")
              if [ ! -f "$RESOLVED" ]; then
                echo "❌ Cible du symlink introuvable: $EXE -> $TGT"; exit 1
              fi
              echo "🪄 Remplace symlink exécutable: $EXE  (-> $TGT)"
              rm -f "$EXE"
              /usr/bin/ditto "$RESOLVED" "$EXE"
              chmod 755 "$EXE"
            fi

            # 2) Chaque helper doit avoir sa copie locale du framework CEF
            DEST_CEF="$APP/Contents/Frameworks/Chromium Embedded Framework.framework"
            if [ -L "$DEST_CEF" ]; then
              echo "🪄 Supprime symlink CEF dans $APP"
              rm -f "$DEST_CEF"
            fi
            if [ ! -d "$DEST_CEF" ]; then
              echo "📚 Copie CEF local dans: $DEST_CEF"
              /usr/bin/ditto "$SRC_CEF" "$DEST_CEF"
            fi

          done < <(find "$BUNDLE_ROOT" -type d -name "4D Helper*.app" -print0)

        done < <(find "${GITHUB_WORKSPACE}" -type d -path "*/WebViewerCEF.bundle/Contents/Frameworks" -print0)

        if [ $FOUND -eq 0 ]; then
          echo "ℹ️ Aucun WebViewerCEF.bundle trouvé (ce n’est pas bloquant)"
        fi

    - name: Preflight — aucun exécutable de helper ne doit être un symlink
      shell: bash
      run: |
        set -euo pipefail
        SYMLINKS_FOUND=0

        while IFS= read -r -d '' SYM; do
          if [ $SYMLINKS_FOUND -eq 0 ]; then
            echo "❌ Symlinks d'exécutables trouvés :"
          fi
          echo " - $SYM"
          SYMLINKS_FOUND=1
        done < <(find "${GITHUB_WORKSPACE}" -type l -path "*/4D Helper*.app/Contents/MacOS/*" -print0)

        if [ $SYMLINKS_FOUND -eq 1 ]; then
          exit 1
        fi

        echo "✅ OK — aucun symlink executable dans les helpers"

    - name: Codesign
      shell: bash
      run: |
        set -euo pipefail

        echo "=== Codesign start for: ${product_path} ==="

        # --- Helpers / Wrappers ---
        retry_codesign() {
          local target="$1"
          local extra_opts="$2"
          local attempt=1
          local max_attempts=5
          local delay=3
          while [ $attempt -le $max_attempts ]; do
            echo "[$attempt/$max_attempts] codesign: $target (opts: $extra_opts)"
            output=$(codesign --verbose --force --options=runtime $extra_opts --sign "${sign}" --keychain "${keychain}" "$target" 2>&1) || true
            status=$?
            echo "$output"
            if [ $status -eq 0 ]; then
              echo "✅ codesign succeeded: $target"
              return 0
            fi
            if echo "$output" | grep -qiE "no identity found|password|resource fork|not found in keychain|code object is not signed at all|The timestamp service is not available"; then
              echo "❌ Fatal codesign error for $target"
              echo "$output"
              return 1
            fi
            echo "⚠️ codesign attempt $attempt failed for $target — retry in ${delay}s..."
            attempt=$((attempt+1))
            sleep $delay
            delay=$((delay * 2))
          done
          echo "❌ codesign ultimately failed for $target after $max_attempts attempts"
          return 1
        }

        retry_codesign_with_entitlements() {
          local target="$1"
          local extra_opts="$2"
          local attempt=1
          local max_attempts=5
          local delay=3
          while [ $attempt -le $max_attempts ]; do
            echo "[$attempt/$max_attempts] codesign(with entitlements): $target (opts: $extra_opts)"
            output=$(codesign --verbose --force --options=runtime $extra_opts --sign "${sign}" --keychain "${keychain}" --entitlements "${entitlements_path}" "$target" 2>&1) || true
            status=$?
            echo "$output"
            if [ $status -eq 0 ]; then
              echo "✅ codesign (with entitlements) succeeded: $target"
              return 0
            fi
            if echo "$output" | grep -qiE "no identity found|password|resource fork|not found in keychain|code object is not signed at all|The timestamp service is not available"; then
              echo "❌ Fatal codesign error for $target (entitlements)"
              echo "$output"
              return 1
            fi
            echo "⚠️ attempt $attempt failed — retrying in ${delay}s..."
            attempt=$((attempt+1))
            sleep $delay
            delay=$((delay * 2))
          done
          echo "❌ failed to sign (with entitlements) $target"
          return 1
        }

        verify_and_dump() {
          local target="$1"
          echo "🔎 Vérification codesign pour: $target"
          if ! codesign --verify --deep --strict --verbose=4 "$target" 2>&1; then
            echo "❌ Verification failed for $target — dumping signature info:"
            codesign -d --verbose=4 "$target" 2>&1 || true
            lipo -info "$target" 2>/dev/null || file "$target" 2>/dev/null || true
            return 1
          else
            echo "✅ Verification OK for $target"
            return 0
          fi
        }

        remove_sig() {
          local f="$1"
          if codesign --remove-signature "$f" 2>/dev/null; then
            echo "🧹 old signature removed: $f"
          else
            true
          fi
        }

        sign_file_handling_universal() {
          local file="$1"
          local opts="$2"
          if lipo -info "$file" 2>/dev/null | grep -q "Architectures in the fat file"; then
            echo "🔧 Detected universal binary, signing per-arch: $file"
            tmpdir=$(mktemp -d)
            trap 'rm -rf "$tmpdir"' RETURN
            archs=$(lipo -info "$file" 2>/dev/null | sed -n 's/.*are:\s*//p' || true)
            IFS=' ' read -r -a arch_array <<< "$archs"
            thin_files=()
            for a in "${arch_array[@]}"; do
              thin="$tmpdir/$(basename "$file").$a"
              lipo "$file" -thin "$a" -output "$thin"
              chmod +x "$thin" || true
              remove_sig "$thin"
              retry_codesign "$thin" "$opts" || { echo "❌ Failed signing thin slice $a of $file"; return 1; }
              verify_and_dump "$thin" || { echo "❌ Verification failed for thin slice $a of $file"; return 1; }
              thin_files+=("$thin")
            done
            merged="$tmpdir/merged_$(basename "$file")"
            lipo -create "${thin_files[@]}" -output "$merged" || { echo "❌ lipo -create failed"; return 1; }
            chmod +x "$merged" || true
            mv "$merged" "$file"
            remove_sig "$file"
            retry_codesign "$file" "$opts" || { echo "❌ Final sign of rebuilt universal failed: $file"; return 1; }
            verify_and_dump "$file" || { echo "❌ Verification failed after final sign of $file"; return 1; }
          else
            remove_sig "$file"
            retry_codesign "$file" "$opts" || { echo "❌ Failed signing file: $file"; return 1; }
            verify_and_dump "$file" || { echo "❌ Verification failed for file: $file"; return 1; }
          fi
        }

        sign_archive_contents() {
          local bundle="$1"
          echo "📂 Signing archive contents: $bundle"
          # executables, dylibs, frameworks, nested apps, bundles/plugins (comme ta version précédente)
          # ... [ici tu gardes exactement ta logique précédente] ...
        }

        echo "Using identity: ${sign}"
        security find-identity -v -p codesigning || true
        echo "product_path: ${product_path}"
        echo "entitlements_path: ${entitlements_path:-<none>}"

        # --- NEW FIX: Sign WebViewerCEF and 4D Helper first ---
        while IFS= read -r -d '' cef_bundle; do
          echo "🔧 Signing WebViewerCEF bundle: $cef_bundle"
          # 4D Helper inside CEF
          while IFS= read -r -d '' helper; do
            echo "  ↳ Signing 4D Helper app: $helper"
            sign_archive_contents "$helper"
          done < <(find "$cef_bundle" -type d -name "4D Helper*.app" -print0)
          # Chromium Embedded Framework inside CEF
          cef_framework="$cef_bundle/Contents/Frameworks/Chromium Embedded Framework.framework"
          if [ -d "$cef_framework" ]; then
            echo "  ↳ Signing Chromium Embedded Framework.framework: $cef_framework"
            sign_archive_contents "$cef_framework"
          fi
          retry_codesign "$cef_bundle" "--timestamp"
          verify_and_dump "$cef_bundle"
        done < <(find "${product_path}" -type d -name "WebViewerCEF.bundle" -print0)

        # --- Continue with all your existing steps frameworks -> bundles/plugins -> nested apps -> archives -> libs -> leaf executables -> final app ---
        # ... ici, tu conserves exactement le reste de ta step originale ...

        echo "=== Codesign finished successfully ==="
      env:
        sign: ${{ inputs.sign }}
        keychain: ${{ inputs.keychain }}
        product_path: ${{ inputs.product_path }}
        entitlements_path: ${{ steps.setup.outputs.entitlements_path }}

    - name: hdiutil (sparse -> convert)
      id: hdiutil
      if: ${{ !contains(inputs.product_path, 'update.mac.4darchive') }}
      shell: bash
      env:
        product_path: ${{ inputs.product_path }}
        dmg_path: ${{ steps.setup.outputs.dmg_path }}
        FS: HFS+                 # ou APFS si tu préfères
        FORMAT: UDBZ             # UDBZ (bzip2) ou UDZO (zlib)
        MARGIN_PCT: "50"         # marge % au-dessus de la taille source
        EXTRA_MB: "500"          # marge fixe supplémentaire en MB
        VERIFY: "1"              # 0 pour désactiver verify
      run: |
        set -euo pipefail

        SRC="${product_path}"
        OUT="${dmg_path}"
        VOLNAME="$(basename "${OUT%.dmg}")"
        WORKDIR="$(mktemp -d /tmp/dmgbuild.XXXXXX)"
        MOUNT_DIR="${WORKDIR}/mnt"
        mkdir -p "$MOUNT_DIR"

        # Estimation taille
        SRC_KB=$(du -sk "$SRC" | awk '{print $1}')
        SRC_MB=$(( SRC_KB / 1024 ))
        if [[ $SRC_MB -lt 1 ]]; then SRC_MB=1; fi
        NEEDED_MB=$(( SRC_MB + (SRC_MB * ${MARGIN_PCT} / 100) + ${EXTRA_MB} ))
        if [[ $NEEDED_MB -lt 300 ]]; then NEEDED_MB=300; fi

        # Sparse + montage
        hdiutil create -type SPARSE -fs "${FS}" -volname "${VOLNAME}" -nospotlight \
          -size "${NEEDED_MB}m" -ov "${WORKDIR}/staging.sparseimage"

        hdiutil attach "${WORKDIR}/staging.sparseimage" -nobrowse -noverify -noautoopen -owners on \
          -mountpoint "${MOUNT_DIR}"

        # Copie
        rsync -a --delete "${SRC}" "${MOUNT_DIR}/"

        # Démontage
        sync
        hdiutil detach "${MOUNT_DIR}" || hdiutil detach -force "${MOUNT_DIR}" || true

        # Compact + conversion
        hdiutil compact "${WORKDIR}/staging.sparseimage" || true
        hdiutil convert "${WORKDIR}/staging.sparseimage" -format "${FORMAT}" -o "${OUT}" -ov

        # Verify optionnel
        if [[ "${VERIFY}" == "1" ]]; then
          hdiutil verify "${OUT}"
        fi

        echo "[✓] DMG prêt: ${OUT}"

    - name: Debug notarization env vars
      id: debug-notarization
      if: ${{ !contains(inputs.product_path, 'update.mac.4darchive') }}
      run: |
        echo "Apple ID: ${apple_id}"
        echo "Team ID: ${team_id}"
        echo "Password is set: [${#password} characters]"
      shell: bash
      env:
        apple_id: ${{ inputs.apple_id }}
        team_id: ${{ inputs.team_id }}
        password: ${{ inputs.password }}

    - name: Notarize with Apple NotaryTool and check result (polling)
      id: notarytool
      if: ${{ !contains(inputs.product_path, 'update.mac.4darchive') }}
      shell: bash
      run: |
        set -euo pipefail

        echo "📦 Soumission à Apple NotaryTool..."
        json_output_file="notarytool-submit.json"
        status_file="${GITHUB_WORKSPACE}/notarization_status.txt"

        # soumission (sans --wait)
        xcrun notarytool submit "${dmg_path}" \
          --apple-id "${apple_id}" \
          --team-id "${team_id}" \
          --password "${password}" \
          --output-format json >"$json_output_file"

        echo "📄 JSON submit:"
        cat "$json_output_file" || true

        submission_id=$(jq -r '.id // empty' "$json_output_file")
        if [[ -z "$submission_id" ]]; then
          echo "❌ Impossible de récupérer l’ID de soumission"
          exit 1
        fi
        echo "🆔 Soumission envoyée, ID=$submission_id"

        # Polling (10s) jusqu'à 1h (360 tentatives)
        attempt=0
        max_attempts=360
        status="In Progress"
        while [[ "$status" == "In Progress" && $attempt -lt $max_attempts ]]; do
          sleep 10
          attempt=$((attempt+1))
          echo "⏳ Vérification notarisation (tentative $attempt)..."
          out=$(xcrun notarytool info "$submission_id" \
            --apple-id "${apple_id}" \
            --team-id "${team_id}" \
            --password "${password}" \
            --output-format json 2>/dev/null || true)
          status=$(echo "$out" | jq -r '.status // empty')
          echo "Statut actuel: ${status:-unknown}"

          # Optionnel: écrire l’instantané JSON pour debug
          echo "$out" > "notarytool-info-$attempt.json" || true
        done

        echo "${status:-Unknown}" > "$status_file"
        echo "notarization_status=${status:-Unknown}" >> $GITHUB_OUTPUT

        if [[ "$status" == "Accepted" ]]; then
          echo "✅ Notarisation réussie"
          exit 0
        elif [[ "$status" == "Invalid" ]]; then
          echo "❌ Notarisation rejetée (Invalid)"
          xcrun notarytool log "$submission_id" \
            --apple-id "${apple_id}" \
            --team-id "${team_id}" \
            --password "${password}" \
            --output-format json || true
          exit 1
        else
          echo "❌ Notarisation non terminée ou statut inattendu: '${status:-Unknown}'"
          exit 1
        fi
      env:
        apple_id: ${{ inputs.apple_id }}
        team_id: ${{ inputs.team_id }}
        password: ${{ inputs.password }}
        dmg_path: ${{ steps.setup.outputs.dmg_path }}
