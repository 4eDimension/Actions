name: Codesign Product
description: Submit product to Apple Notary

inputs:
  sign:
    required: true
    type: string
  keychain:
    required: true
    type: string
  apple_id:
    required: true
    type: string 
  team_id:
    required: true
    type: string 
  password:
    required: true
    type: string 
  product_path:
    required: true
    type: string
  dmg_path:
    required: true
    type: string

outputs:
  product_path: 
    value: ${{ inputs.product_path }}
  dmg_path: 
    value: ${{ inputs.dmg_path }}
  notarization_status:
    value: ${{ steps.notarytool.outputs.notarization_status }}

runs:
  using: "composite"
  steps:

    - name: Setup
      id: setup
      shell: bash
      run: |
        echo "dmg_path=${{ inputs.dmg_path }}" >> $GITHUB_OUTPUT
        curl -sL "${entitlements_url}" -o entitlements.plist
        echo "entitlements_path=${GITHUB_WORKSPACE}/entitlements.plist" >> $GITHUB_OUTPUT
      env:
        entitlements_url: 'https://raw.githubusercontent.com/miyako/4D/v1/entitlements.plist'

    - name: Codesign
      shell: bash
      env:
        sign: ${{ inputs.sign }}
        keychain: ${{ inputs.keychain }}
        product_path: ${{ inputs.product_path }}
        entitlements_path: ${{ steps.setup.outputs.entitlements_path }}
      run: |
        set -euo pipefail
        shopt -s globstar nullglob

        retry_codesign() {
          local target="$1"
          local timestamp_flag="$2"
          local attempt=1
          local max_attempts=5
          local delay=5

          while [ $attempt -le $max_attempts ]; do
            echo "[$attempt/$max_attempts] codesign de: $target"
            if codesign --verbose --deep --strict --options=runtime $timestamp_flag \
                --force --sign "${sign}" --keychain "${keychain}" \
                --entitlements "${entitlements_path}" "$target"; then
              echo "‚úÖ codesign r√©ussi pour $target"
              return 0
            fi

            echo "‚ö†Ô∏è Tentative $attempt √©chou√©e, nouvelle tentative dans ${delay}s..."
            attempt=$(( attempt + 1 ))
            sleep $delay
            delay=$(( delay * 2 ))
          done

          echo "‚ùå √âchec apr√®s $max_attempts tentatives pour $target"
          return 1
        }

        # Collecte tous les items √† signer
        VALID_ITEMS=()

        echo "=== Collecte des binaires externes ==="
        for f in "${product_path}"/**/*.{dylib,so}; do
          [[ -x "$f" ]] && VALID_ITEMS+=("$f")
        done

        echo "=== Collecte des frameworks ==="
        for f in "${product_path}"/**/*.framework; do
          VALID_ITEMS+=("$f")
        done

        echo "=== Collecte des bundles/plugins/kexts ==="
        for f in "${product_path}"/**/*.{bundle,plugin,kext}; do
          VALID_ITEMS+=("$f")
        done

        echo "=== Collecte des .4dbase et .4darchive internes ==="
        for bundle in "${product_path}"/**/*.{4dbase,4darchive}; do
          for f in "$bundle"/**/*.{dylib,so}; do
            [[ -e "$f" ]] && VALID_ITEMS+=("$f")
          done
        done

        echo "=== Collecte des apps internes ==="
        for f in "${product_path}"/**/*.app; do
          VALID_ITEMS+=("$f")
        done

        if [ ${#VALID_ITEMS[@]} -eq 0 ]; then
          echo "‚ÑπÔ∏è Aucun item valide trouv√© √† signer, skipping codesign."
        else
          echo "üì¶ Signing ${#VALID_ITEMS[@]} items..."
          for item in "${VALID_ITEMS[@]}"; do
            retry_codesign "$item" "--timestamp" || exit 1
          done
        fi

        echo "‚úÖ Tous les composants ont √©t√© sign√©s et v√©rifi√©s."

    - name: Create DMG
      id: hdiutil
      shell: bash
      env:
        product_path: ${{ inputs.product_path }}
        dmg_path: ${{ steps.setup.outputs.dmg_path }}
      run: |
        set -euo pipefail
        SRC="${product_path}"
        OUT="${dmg_path}"
        VOLNAME="$(basename "${OUT%.dmg}")"
        WORKDIR="$(mktemp -d /tmp/dmgbuild.XXXXXX)"
        MOUNT_DIR="${WORKDIR}/mnt"
        mkdir -p "$MOUNT_DIR"

        echo "[i] Creating sparse image..."
        SRC_MB=$(( $(du -sm "$SRC" | cut -f1) ))
        NEEDED_MB=$(( SRC_MB * 2 ))
        hdiutil create -type SPARSE -fs HFS+ -volname "$VOLNAME" -size "${NEEDED_MB}m" -nospotlight -ov "${WORKDIR}/staging.sparseimage"
        hdiutil attach "${WORKDIR}/staging.sparseimage" -nobrowse -noverify -noautoopen -owners on -mountpoint "$MOUNT_DIR"
        rsync -a "$SRC/" "$MOUNT_DIR/"
        sync
        hdiutil detach "$MOUNT_DIR"
        hdiutil convert "${WORKDIR}/staging.sparseimage" -format UDBZ -o "$OUT" -ov
        echo "[‚úì] DMG ready: $OUT"

    - name: Notarize with Apple NotaryTool
      id: notarytool
      shell: bash
      env:
        apple_id: ${{ inputs.apple_id }}
        team_id: ${{ inputs.team_id }}
        password: ${{ inputs.password }}
        dmg_path: ${{ steps.setup.outputs.dmg_path }}
      run: |
        set -euo pipefail
        echo "üì¶ Soumission √† Apple NotaryTool..."
        xcrun notarytool submit "${dmg_path}" \
          --apple-id "${apple_id}" \
          --team-id "${team_id}" \
          --password "${password}" \
          --wait \
          --output-format json > notarytool-output.json

        status=$(jq -r '.status // empty' notarytool-output.json)
        submission_id=$(jq -r '.id // empty' notarytool-output.json)
        echo "üõ°Ô∏è Statut notarisation: $status"

        echo "$status" > notarization_status.txt

        if [[ "$status" == "Accepted" ]]; then
          echo "‚úÖ Notarisation r√©ussie"
          exit 0
        elif [[ "$status" == "Invalid" ]]; then
          echo "‚ùå Notarisation rejet√©e"
          xcrun notarytool log "$submission_id" \
            --apple-id "${apple_id}" \
            --team-id "${team_id}" \
            --password "${password}" \
            --output-format normal || true
          exit 1
        else
          echo "‚ùå Statut inattendu: $status"
          exit 1
        fi